version: "1.0"
package: python3-defaults
opinion_name: optimized
purity_level: configure-only

description: |
  Python with PGO (Profile-Guided Optimization) and LTO enabled.

  Provides 10-30% performance improvement for CPU-intensive workloads.

  WARNING: This build takes 2-3 hours due to PGO requiring two compilation
  passes plus benchmark suite execution. The result is worth it for
  production deployments running compute-heavy Python code.

maintainer:
  name: Lebowski Project
  email: opinions@lebowski.org

tags:
  - performance
  - optimization
  - pgo
  - lto

debian_versions:
  - bookworm

modifications:
  configure_flags:
    add:
      - "--enable-optimizations"  # Enables PGO + LTO
      - "--with-lto"              # Link-Time Optimization

  env:
    DEB_CFLAGS_APPEND: "-O3"
    DEB_BUILD_OPTIONS: "parallel=4"

build_notes: |
  Build time: 2-3 hours (PGO requires building Python twice + running benchmarks)

  Disk space required: ~2GB

  This is significantly longer than standard Python build (~30 minutes),
  but the performance gains are substantial for production use.

performance_notes: |
  Expected performance improvements:
  - 10-30% faster for CPU-bound Python code
  - Particularly good for: data processing, numerical computing, web backends
  - Less impact on I/O-bound code

  Benchmarks (vs standard Debian python3):
  - pyperformance geometric mean: ~15-20% faster
  - NumPy operations: ~10-15% faster
  - Django requests/sec: ~10-12% faster

references:
  - "https://www.python.org/dev/peps/pep-0587/#optimizations"
  - "https://github.com/python/cpython - PGO documentation"
  - "Clear Linux uses --enable-optimizations by default"
