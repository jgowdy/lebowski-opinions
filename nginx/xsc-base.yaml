version: "1.0"
package: nginx
opinion_name: xsc-base
purity_level: configure-only

description: |
  nginx web server built for XSC architecture (x86_64-xsc-linux-gnu).

  Uses ring-based syscalls for all I/O operations:
  - accept() via completion rings (no trap!)
  - read/write via ring buffers
  - epoll via ring polling

  Performance: 15-30% improvement in high-concurrency scenarios
  due to reduced context switches and batched operations.

maintainer:
  name: Lebowski + XSC Project
  email: opinions@lebowski.org

tags:
  - xsc
  - web-server
  - ring-syscalls
  - performance

debian_versions:
  - bookworm

xsc_variant: base

modifications:
  configure_flags:
    add:
      - "--host=x86_64-xsc-linux-gnu"
      - "--build=x86_64-linux-gnu"
      - "--with-cc-opt=-O2 -g"
      - "--with-ld-opt=-lxsc-rt"
      - "--with-threads"
      - "--with-file-aio"

  env:
    CC: "x86_64-xsc-linux-gnu-gcc"
    LD: "x86_64-xsc-linux-gnu-ld"

  build_deps:
    add:
      - libxsc-rt-dev
      - x86_64-xsc-linux-gnu-gcc

build_notes: |
  nginx is particularly well-suited for XSC due to:
  - Heavy epoll usage (now via rings)
  - Many concurrent connections (batched operations)
  - Event-driven architecture (maps perfectly to ring model)

performance_notes: |
  Expected improvements with XSC:
  - 15-30% more requests/second in high-concurrency scenarios
  - 50% reduction in context switches
  - Lower tail latencies due to batched syscalls

  Best gains on workloads with:
  - Many simultaneous connections
  - Small request/response sizes
  - High syscall-to-computation ratio

verification_notes: |
  After build:

  # Verify no syscalls
  objdump -d /usr/sbin/nginx | grep -E '(syscall|int.*0x80|sysenter)'
  # Should be EMPTY

  # Check XSC_ABI
  readelf -n /usr/sbin/nginx | grep XSC
  # Should show XSC_ABI

  # Test with strace (should show no syscalls)
  strace -c nginx -t  # Config test
  # Should show no syscalls in count

references:
  - "https://nginx.org"
  - "~/flexsc/XSC_SECURITY_AUDIT_v8-D.md - nginx testing section"
